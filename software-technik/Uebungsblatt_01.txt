2a
- stellt optimierte Arbeitsweise für Programmentwicklung dar
- soll schrittweisen und gut geplanten Ablauf gewährleisten (Systematisch arbeiten)
- bestehend aus 7 Stufen:
	1. system requirements (notwendige Hardware)
	2. software requirements (notwendige Software, bildet mit [1] die 'Ist-Analyse' und das 'Soll-Konzept'¹)
	3. analysis (Zerlegen von Zielen und Problemen in kleinere Teilaufgaben zur Entwicklung von Strategien¹)
	4. program design (Software-Architektur ermitteln, software-blueprint entwickeln und Entwurfsdokument erstellen¹)
	5. coding (Umsetzung von [4] in Programmiersprache, seperate Entwicklung von Teilsoftware, schrittweise Integration in Projekt¹)
	6. testing (vollständiges Produkt erstmals in Gesamtheit testen, Beta-Tests zur Prüfung der Anforderungserfüllung¹)
	7. operations (erfolgreiche Tests als Voraussetzung, Freigabe für Betrieb, ggf. Wartung und Verbesserung¹)
- Pfeile stellen Rücksprünge dar:
	- schrittweiser Rücksprung falls vorheriger Schritt unvollständig oder fehlerhaft (z.B. fehlgeschlagene Testphase)
	- Rücksprünge über mehrere Stufen bei tiefersitzenden Problemen (z.B. fehlerhafte Analyse oder Änderung der Voraussetzungen im Nachhinein)

2b
Vorteil: Kosten- und Aufwandsabschätzungen bereits zu Beginn möglich¹
Nachteil: Späte Tests lassen Fehler ggf. erst zu Ende der Softwareentwlicklung aufzeigen¹

3a⁽²⁾
1. Single-Responsibility-Prinzip
2. Open-Closed-Prinzip
3. Liskovsches Substitutionsprinzip
4. Interface-Segregation-Prinzip
5. Dependency-Inversion-Prinzip


Das Open-Closed-Prinzip, nach welchem Softwareklassen offen für Erweiterung aber geschlossen gegenüber Modifikationen sein sollen gewährleistet, dass bereits fertiger Code nicht im Nachhinein fehlerhaft wird. Die Veränderung bereits existierender und implementierter Klassen gefährdet die Funktionalität anderer Softwareteile. Um dies zu verhindern, werden Konzepte wie Vererbung oder Interfaces genutzt, wodurch einer Anwendung neue Funktionen hinzugefügt werden können, ohne existierenden Code zu gefährden. Dies ist essenziell für einen strukturierten Entwicklungsprozess, insbesondere in größeren Maßstäben. Arbeiten mehrere Personen an einem Programm, würde die Änderung von viel genutzten Funktionen die vorhandenen Implementierungen dieser gefährden, ohne das Ursachenbewusstsein des nun vorhandenen Fehlers zu gewährleisten.
Das Interface-Segregation-Prinzip fordert von einen Client keine Abhängigkeiten eines Servers zu besitzen, dessen Funktion nicht im Client benötigt wird. Sind mehrere, nicht eng zusammenhängende Funktionen zusammengefasst, ist eine vollständige Implementierung des Interfaces notwendig - selbst wenn ein Großteil dieses vollkommen irrelevant für das angestrebte Ziel ist. Das Interface-Segregation-Prinzip verhindert die Entstehung unnötiger Kosten durch Arbeitsaufwand und Betriebskosten.

4a
Die in der Vorlesung genannten Aspekte, welche Software umfasst sind: Computerprogramme, deren Vorgänge, die Dokumentation derselbigen und derer Daten. Als Beispiel für Software nutze ich den UNIX-Befehl 'ls' und stelle dessen vier Softwareaspekte dar, beginnend mit dem des Computerprogramms. 'LS' ist bei Linux-Systemen vorinstalliert in /bin/ls und damit systemweit abrufbar. Bei Ausführung wird eine Auflistung der Dateien im aktuellen Ordner in Standard-Output ausgegeben, je nach command-line-arguments mehr oder weniger ausführlich oder formattiert. Die Dokumentation dieser Software ist, da sie open-source ist sehr umfassend, einerseits unter Gebrauch des man Befehls, andererseits durch die online documentation der GNU-coreutils. Die Daten dieser Software sind weniger relevant als die eines z.B. Datenbank Tools, da 'LS' nicht notwenigerweise auf existierende Dateien zugreifen muss, als CLI Befehl genügt der Output zu STD_OUT. Im engeren Verständnis zählt die executeable 'ls' selbst als die Daten ihres Programms.

4b
Da es sich bei der gewählten Software um Open-Source hält, ist das Prinzip "Kostendenken" insofern erfüllt, dass keine Instanz auf eine Kostenkalkulation und -minimierung angewiesen ist. Die einzigen Kosten, die hier im entferntesten vorhanden sind, sind die Arbeitszeit. Dies steht somit auch nicht im Konflikt zum "Probleme durch Zerlegung lösen", sollten Probleme oder Wünsche auftreten ist es für externe Entwickler*innen kein Problem diese Funktionen zu implementieren. Da die gewählte Software unter keinem monetären Druck entsteht, stehen zuvor genannte Prinzipien nicht im Konflikt.

Quellen:
(1) 'https://www.ionos.de/digitalguide/websites/web-entwicklung/wasserfallmodell/'
(2) 'https://www.microconsult.de/blog/2019/05/fl_solid-prinzipien/'
